====== Fstab 설정 ======

Fstab(**f**ile **s**ystems **tab**le)은 필요할 때(부팅하거나 물리적으로 연결할 때) 어떻게 파일시스템(일반적으로 block 장치들)을 마운트 할 것 인지 정의하는 중심 설정입니다. 이렇게 한다면 장치를 접근할 때 직접 장치를 마운트 할 필요가 없습니다. 마운트 설정은 정적 파일시스템뿐만 아니라 스왑 파티션으로도 이루어져 있습니다.\\ 
fstab UCI 서브시스템은 모든 장치들과 파일시스템을 마운트 되는 옵션을 정의되는 곳입니다. 이 파일은 **///etc/config/fstab//** 여기에 있습니다.\\
평균적으로 LEDE(네트워크 장치)를 사용하는 경우 필요하지 않기 때문에 기본적으로 이 서브시스템과 설정 파일은 존재하지 않습니다.\\
그래서 이 설정이 필요하다면 먼저 만들어야 합니다.

LEDE에서 마운트를 다루는 도구는 **block**이므로, 현재 옵션은 [[https://git.lede-project.org/?p=project/fstools.git;a=blob;f=block.c;hb=HEAD|소스코드]]에서 찾을 수 있습니다..


==== fstab 생성 ====
//block//유틸리티를 사용해야 합니다.//block-mount//패키지를 설치하세요:
<code>root@lede:~# opkg update && opkg install block-mount
</code>
//block detect// 호출하여 샘플 fstab UCI 서브시스템 설정 파일을 가져오세요.
<code>root@lede:~# block detect > /etc/config/fstab
</code>

이제 UCI 서브시스템이 생겼습니다. UCI 명령줄을 사용하여 변경하거나 파일 자체를 편집 할 수 있습니다.

다른 디바이스에서는 과정이 좀 더 복잡합니다. 자세한 내용은 [[https://wiki.openwrt.org/doc/howto/extroot|HOWTO extroot]] 를 참조하세요.\\ 
또한 마운트 과정 및 관련된 스크립트에 관해서 [[https://wiki.openwrt.org/doc/techref/block_mount|OpenWrt techref]를 참조하세요.

==== 부팅시 fatab 사용 ====

새로운 UCI 서브시스템을 활성화 하게 하여 부팅시 올바르게 마운트가 되도록 하려면 다음을 입력하세요.
<code>root@lede:~# service fstab enable
</code>

===== 설정 =====

설정 파일은 기본값을 정의하는 //global// 세션, 마운트 할 파일시스템을 정의하는 //mount// 세션, 활성화 할 파티션을 정의하는 //swap// 세션이 있습니다.
Fstab 설정을 바꿀 때 마다 이 명령을 수행하여 모든 것을 새로운 방식으로 마운트 하세요:
<code>root@lede:~# block umount && block mount
</code>

==== global 세션 ====

^이름          ^Type   ^Required^기본값^설명                                               ^
|//anon_swap// |boolean|no      |0      |자체 설정 세션없는 swap 장치를 마운트하십시오.  |
|//anon_mount//|boolean|no      |0      |자체 설정 세션이없는 마운트 블록 장치 |
|//auto_swap// |boolean|no      |1      |swap 장치가 나타날 때 자동으로 마운트합니다.           |
|//auto_mount//|boolean|no      |1      |block 장치가 나타날 때 자동으로 마운트          |
|//delay_root//|integer|no      |0      |부팅시 루트 장치를 마운트하기 전에 X 초 동안 기다리십시오  |
|//check_fs//  |boolean|no      |0      |마운트하기 전에 장치에서 e2fsck를 실행하십시오.                       |

==== swap 세션 ====

^이름      ^Type  ^Required^기본값^설명                                                ^
|//device//|string|no      |-      |swap 파티션의 장치 노드 (예 : sda1)                |
|//uuid//  |string|no      |-      |swap 파티션의 UUID                            |
|//label// |string|no      |-      |swap 파티션의 레이블 (예 : mkswap -L label / dev / sdb2)|
==== mount 세션 ====

^이름      ^Type  ^Required^기본값^설명                                                                                        ^
|//device//|string|no      |-      |데이터 파티션의 장치 노드 (예 : sda1)                                                   |
|//uuid//  |string|no      |-      |데이터 파티션의 UUID                                                                      |
|//target//|string|no      |-      |데이터 파티션의 마운트 지점. 일부 값은 특별한 의미가 있습니다. 아래의 Extroot 섹션을 참조하십시오.|
===== 적절한 양의 swap =====

사람들에게 물어보거나 인터넷에서 검색하면, 두배가 되는 512MiB 램이거나 그보다 적거나 같은 양의 램일 경우의 정보를 찾을 수 있습니다.이 대략적인 견적은 임베디드 장치에 적용됩니다.\\ 
실제 RAM과 비교할 때 SWAP의 **액세스 시간** 은 절대적이지 않으므로 swap을 사용하면 특정 경우에 많은 도움이 되지 않을 수 있습니다..\\ 
CUPS 스풀링 서버는 SWAP만 사용할 수 있기 때문에 잘 실행되지만 일부 응용 프로그램은 "실제" RAM에 보관되는 것이 아니라 SWAP에 데이터가 저장되는 것이 성능이 매우 좋지 않을 수 있습니다.\\ 
데이터가 RAM에저장되고 SWAP에 저장되는 결정은 시스템에 의해 결정됩니다. 다른 운영 체제와 달리 Linux는메모리를 충분하게 사용하므로 시스템이 더 부드럽고 효율적으로 실행됩니다. 응용 프로그램에서 메모리를 필요로 하면 시스템에서 다시 언로드하고 메모리를 사용할 수 있게 만듭니다.
